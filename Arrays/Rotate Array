 soln in java:
class Solution
{
    //Function to rotate an array by d elements in counter-clockwise direction. 
    static void rotateArr(int arr[], int d, int n)
    {
        if(d>=n)
            d=d%n;//this is not required but helps to reduce the time
        while(d>0)
        {
            int t=arr[0];
            for(int i=0;i<n-1;i++)
            {
                arr[i]=arr[i+1];
            }
            arr[n-1]=t;
            d--;
        }
    }
}
//time constraint is not satisfied so other more optimised code:
class Solution
{
    //Function to rotate an array by d elements in counter-clockwise direction. 
    static void rotateArr(int arr[], int d, int n)
    {
        int i;
        int b[]=new int[n];
        if(d>=n)
            d=d%n;
            
        for(i=0;i<d;i++)
            b[i]=arr[i];
            
        int j=0;
        
        for(i=d;i<n;i++)
            arr[j++]=arr[i];
        
        int k=0;
        for(i=j;i<n;i++)
        {
            arr[i]=b[k];
            k++;
        }
    }
}

in c++:

class Solution{
    public:
   
   //Function to rotate an array by d elements in counter-clockwise direction. 
   void rotateArr(int arr[], int d, int n)
   {
       int i,b[d];
    if(d>=n) 
         d=d%n;

    for(i=0;i<d;i++){
        b[i]=arr[i];
    }
    int j=0;
    for(i=d;i<n;i++){
        arr[j++]=arr[i];
    }
    int k=0;
    for(i=j;i<n;i++){
        arr[i]=b[k];
        k++;
    }
   }
};

//generally try to avoid nested loops as it reduces the run time!!
